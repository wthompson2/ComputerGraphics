Fragment:
precision highp float;

varying vec3 vNormal;

uniform vec3 color;

uniform vec3 ambientColor;


varying vec3 vPosition;

uniform float time;

//uv that we will receive from the vertex shader
varying vec2 vUv;

void main() {
     
    float lightStrength = dot(normalize(vec3(sin(time), 1.5, 0) - vPosition), vNormal);
    
    
    gl_FragColor = vec4( (color + vec3(sin(vUv.x * 100.0), sin(vUv.y*100.0),0.0 ))* lightStrength + ambientColor, 1.0 );
    // gl_FragColor = vec4( color * lightStrength + ambientColor, 1.0 );
}

Vertex:
uniform mat4 modelViewMatrix;   
uniform mat4 projectionMatrix;  
attribute vec3 position;        
uniform mat4 modelMatrix;       

attribute vec3 normal;
attribute vec2 uv;

varying vec3 vNormal;

varying vec3 vPosition;

//uv that we will send to the fragment shader
varying vec2 vUv;

uniform float time;

void main() {
    vNormal = normalize( vec3( modelMatrix * vec4(normal, 0.0 ) )).xyz;
    
    vUv = uv;
    
    vec3 vPosition = ( modelMatrix * vec4( position, 1.0 )).xyz;
    
    //gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
    gl_Position = projectionMatrix * modelViewMatrix * vec4( position + vec3(-sin(time), 0.0, 0.0), 1.0 );
}